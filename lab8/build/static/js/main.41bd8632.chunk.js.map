{"version":3,"sources":["components/ToDoItem/edit.svg","components/ToDoItem/edit.js","components/ToDoItem/ToDoItem.js","components/AddButton/add.svg","components/AddButton/AddButton.js","App.js","reportWebVitals.js","index.js"],"names":["Edit","i","onEdit","onClick","src","editSvg","alt","ToDoItem","className","type","defaultChecked","completed","onChange","hchange","style","textDecorationLine","color","description","item","n","AddTask","tasks","onAddTask","useState","visibleForm","setFormVisible","inputValue","SetInputValue","ToggleFormVisible","value","placeholder","e","target","obj","id","addSvg","tasks_obj","App","index","state","map","indexOf","setState","console","log","this","act_tasks","filter","task","compl_tasks","final_tasks","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41bd8632.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/edit.1bda04de.svg\";","import React from 'react';\r\nimport editSvg from './edit.svg'\r\n\r\n\r\nconst Edit = (i, onEdit) => {\r\n    const editTask = (i) => {\r\n        // onEdit(i);\r\n        return 0;\r\n    }\r\n\r\n    return (\r\n        <button onClick={editTask(i)}>\r\n            <img src = {editSvg} alt = \"edit icon\"/>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Edit;\r\n","import React from 'react';\r\nimport Edit from './edit'\r\n\r\n\r\n\r\nconst ToDoItem = (i, onEdit) => {\r\n    const resolvedClass = {\r\n        textDecorationLine : 'line-through',\r\n        color : 'gray'\r\n    }\r\n    return (\r\n\r\n           <div className = \"todoitem\">\r\n            <div className = \"input\">\r\n                <input type = \"checkbox\" \r\n                defaultChecked = {i.completed}\r\n                onChange = {i.hchange}\r\n                />         \r\n            </div>\r\n\r\n               <div className = \"description\">\r\n                    <p style = {i.completed === true ? resolvedClass : {}}>\r\n                        {i.description}\r\n                 </p>           \r\n                </div>\r\n           \r\n                <Edit item = {i} onEdit = {onEdit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoItem;","export default __webpack_public_path__ + \"static/media/add.c4fa83e1.svg\";","import React, {useState} from 'react';\r\nimport addSvg from './add.svg'\r\n\r\nlet n = 4;\r\n\r\nconst AddTask = ({tasks, onAddTask}) => {\r\n    const [visibleForm, setFormVisible] = useState(false);\r\n    const [inputValue, SetInputValue] = useState('');\r\n\r\n    const ToggleFormVisible = () => {\r\n        setFormVisible(!visibleForm);\r\n        SetInputValue('');\r\n    }\r\n\r\n    const add = () => {\r\n        const obj = { \r\n            id: n++,\r\n            description: inputValue,\r\n            completed: false\r\n        }\r\n        onAddTask(obj, n);\r\n        ToggleFormVisible();\r\n    }\r\n\r\n    return(\r\n        <div className = \"task_form\">\r\n            {!visibleForm ? \r\n                    <div onClick = {ToggleFormVisible} className = \"task_form_new\">\r\n                    <img src = {addSvg} alt = \"add icon\"/>\r\n                    <span>Новая задача</span>\r\n                </div> :\r\n            <div className = \"task_form_block\">\r\n            <input \r\n                 value = {inputValue}\r\n                 className=\"field\"\r\n                 type=\"text\"\r\n                 placeholder=\"Текст задачи\"\r\n                 onChange = {e => SetInputValue(e.target.value)}\r\n            />\r\n         <button onClick = {add} className = \"button\">\r\n             Добавить задачу\r\n         </button>            \r\n         <button onClick = {ToggleFormVisible} className = \"button_gray\">\r\n             Отмена\r\n         </button>\r\n            </div>\r\n                }\r\n\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default AddTask;","import './App.css';\r\nimport ToDoItem from './components/ToDoItem/ToDoItem'\r\nimport AddTask from './components/AddButton/AddButton'\r\nimport './components/ToDoItem/ToDoItem.css'\r\nimport { Component } from 'react';\r\n\r\nconst tasks_obj = [\r\n  {\r\n    id: 0,\r\n    description: 'Проснуться',\r\n    completed: false\r\n  },\r\n  {\r\n    id: 1,\r\n    description: 'Улыбнуться',\r\n    completed: false\r\n  },\r\n  {\r\n    id: 2,\r\n    description: 'Покушать',\r\n    completed: false\r\n  },\r\n  {\r\n    id: 3,\r\n    description: 'Заснуть',\r\n    completed: false\r\n  }\r\n]\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      tasks : tasks_obj,\r\n    }\r\n  }\r\n\r\n  hchange = id => {\r\n    const index = this.state.tasks.map(item => item.id).indexOf(id);\r\n    \r\n    this.setState (state => {\r\n      let {tasks} = state;\r\n      console.log(tasks[index].completed);\r\n\r\n      if (tasks[index].completed === false) tasks[index].completed = true;\r\n\r\n      console.log(tasks[index].completed);\r\n      return tasks;\r\n    }) \r\n  }\r\n\r\n  onAddTask = (obj, n) => {\r\n    this.setState (state => {\r\n      // state.tasks = [...state.tasks, obj];\r\n      state.tasks[n] = obj;\r\n      console.log('', state.tasks);\r\n      return state.tasks;\r\n    })\r\n  }\r\n\r\n  onEdit = id => {\r\n    console.log('hello', id);\r\n    return 0;\r\n  }\r\n\r\n  render() {\r\n    \r\n    const {tasks} = this.state;\r\n\r\n    const act_tasks = tasks.filter(task => task.completed === false);\r\n    const compl_tasks = tasks.filter(task => task.completed === true);\r\n\r\n    const final_tasks = [...act_tasks,...compl_tasks].map(item => {\r\n      return (\r\n        <ToDoItem\r\n        key = {item.id}\r\n        description = {item.description}\r\n        completed = {item.completed}\r\n        hchange = {() => {this.hchange(item.id)}}\r\n        onEdit = {() => {this.onEdit(item.id)}}\r\n        />\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className = \"Title\">\r\n            Список задач:\r\n        </div>\r\n        <div className = \"main\">\r\n          <div className = \"ContainerForList\">\r\n          <div className =\"List\">\r\n             {final_tasks}\r\n             \r\n          </div>\r\n            <AddTask tasks = {tasks} onAddTask = {this.onAddTask} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
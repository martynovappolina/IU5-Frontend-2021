{"version":3,"sources":["components/Card.tsx","components/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","src","user","avatar_url","alt","href","url","name","location","bio","rep","map","repo","html_url","target","Search","useState","String","data","setData","UserName","SetUserName","repositories","SetRepositories","i","visibleForm","setFormVisible","ToggleFormVisible","a","fetch","profile","ok","json","profileJson","repos_url","repositoriesJson","alert","console","log","onClick","placeholder","type","value","onChange","e","preventDefault","submitHandler","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQA4CeA,EAxCF,SAACC,GACV,OACI,sBAAKC,UAAY,UAAjB,UAEA,sBAAKA,UAAY,QAAjB,UAEK,qBACGA,UAAU,0BACVC,IAAKF,EAAMG,KAAKC,WAChBC,IAAKL,EAAMG,KAAKC,aAGpB,sBAAKH,UAAY,OAAjB,UACE,wEADF,IACqB,mBAAGK,KAAQN,EAAMG,KAAKI,IAAtB,SAA4BP,EAAMG,KAAKI,MAC1D,wDAFF,IAEsBP,EAAMG,KAAKK,KAAsB,8BAAMR,EAAMG,KAAKK,OAAhC,0DACtC,wHAHF,IAG+BR,EAAMG,KAAKM,SAA0B,8BAAMT,EAAMG,KAAKM,WAAhC,0DACnD,sDAJF,IAIoBT,EAAMG,KAAKO,IAAqB,8BAAMV,EAAMG,KAAKO,MAAhC,gEAIzC,qBAAKT,UAAY,MAAjB,SACA,6BACKD,EAAMW,IAAIC,KAAI,SAAAC,GAAI,OACjB,qBAAKZ,UAAU,0BAAf,SACE,sBAAKA,UAAU,OAAf,UACE,mBAAGA,UAAU,qCACb,qBAAKA,UAAU,UAAf,SACE,mBAAGK,KAAMO,EAAKC,SAAUb,UAAU,SAASc,OAAO,SAAlD,SACGF,EAAKL,aALgCK,EAAKL,iBCoElDQ,EA1FA,WAEX,MAAwBC,mBAAS,CAACT,KAAMU,OAAQd,WAAYc,OAAQX,IAAKW,OACzET,SAAUS,OAAQR,IAAKQ,SADvB,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAAgCH,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACA,EAAuCL,mBAAS,CAAC,CAACT,KAAMU,OAAQJ,SAAUI,UAA1E,mBAAMK,EAAN,KAAoBC,EAApB,KAEMrB,EAAiB,CAACK,KAAOW,EAAKX,KAA2BJ,WAAYe,EAAKf,WAC5EG,IAAKY,EAAKZ,IAA0BG,IAAKS,EAAKT,IAC9CD,SAAUU,EAAKV,UAEbE,EACFY,EAAaX,KAAM,SAAAa,GAAC,MAChB,CAACjB,KAAMiB,EAAEjB,KACTM,SAAUW,EAAEX,aAKpB,EAAsCG,oBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAEMC,EAAoB,WACtBD,GAAgBD,IAtBH,4CAyBjB,kCAAAG,EAAA,sEAI0BC,MAAM,gCAAD,OAAiCT,IAJhE,YAIUU,EAJV,QAMgBC,GANhB,iCAQiCD,EAAQE,OARzC,cAQaC,EARb,gBASkCJ,MAAMI,EAAYC,WATpD,cASaZ,EATb,iBAUsCA,EAAaU,OAVnD,QAUaG,EAVb,OAYWF,IACHd,EAAQc,GACRV,EAAgBY,IAGjBR,IAjBP,wBAoBQS,MAAM,8HApBd,6CAzBiB,sBAiDjB,OACI,8BACEX,EAyBF,gCACKY,QAAQC,IAAIhB,GACb,cAAC,EAAD,CAAMpB,KAAMA,EAAMQ,IAAKA,IACvB,yBACAV,UAAY,oBACZuC,QAAWZ,EAFX,UAGA,mBAAG3B,UAAU,uBAHb,uCA3BF,sBAAKA,UAAU,YAAf,UACA,sBAAKA,UAAU,gBAAf,UACE,mBAAGA,UAAU,gBACb,uBACEA,UAAU,SACVwC,YAAY,yIACZC,KAAK,OACLC,MAAOtB,EACPuB,SAAY,SAAAC,GAAMvB,EAAYuB,EAAE9B,OAAO4B,aAKzC,yBACI1C,UAAU,oBACVyC,KAAO,SACPF,QAAS,SAAAK,GAAMA,EAAEC,iBApEZ,mCAoE8BC,IAHvC,UAII,mBAAG9C,UAAU,gBAJjB,0CCvDG+C,MAVf,WACE,OACE,qBAAK/C,UAAU,MAAf,SACE,qBAAKA,UAAY,OAAjB,SACI,cAAC,EAAD,SCKKgD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f6c468b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport {UserPage} from './Search'\r\nimport {Rep} from './Search'\r\n\r\nconst Card = (props: {user: UserPage, rep:Rep[]}) => {\r\n    return (\r\n        <div className = \"Profile\"> \r\n\r\n        <div className = \"Human\"> \r\n\r\n             <img\r\n                className=\"ui small circular image\"\r\n                src={props.user.avatar_url}\r\n                alt={props.user.avatar_url}\r\n              />\r\n\r\n            <div className = \"Name\">\r\n              <div>Ссылка:</div> <a href = {props.user.url}>{props.user.url}</a>\r\n              <div> Имя: </div> {!props.user.name ? 'данных нет' : <div>{props.user.name}</div>} \r\n              <div>Местоположение:</div> {!props.user.location ? 'данных нет' : <div>{props.user.location}</div>} \r\n              <div>Био:</div> {!props.user.bio ? 'данных нет' : <div>{props.user.bio}</div>} \r\n            </div>\r\n        </div>\r\n\r\n        <div className = \"Rep\">\r\n        <td>\r\n            {props.rep.map(repo => (\r\n              <div className=\"ui relaxed divided list\" key={repo.name}>\r\n                <div className=\"item\">\r\n                  <i className=\"large github middle aligned icon\"></i>\r\n                  <div className=\"content\">\r\n                    <a href={repo.html_url} className=\"header\" target=\"_blank\">\r\n                      {repo.name}\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </td>\r\n          </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import \"./Search.css\";\r\nimport Card from './Card';\r\nimport React, {useState} from 'react';\r\nimport { Interface } from \"node:readline\";\r\n\r\nconst Search = () => {\r\n\r\n    const [data, setData] = useState({name: String, avatar_url: String, url: String,\r\n    location: String, bio: String});\r\n    const [UserName, SetUserName] = useState(\"\");\r\n    const[repositories, SetRepositories] = useState([{name: String, html_url: String}]);\r\n\r\n    const user: UserPage = {name : data.name as unknown as string, avatar_url: data.avatar_url as unknown as string, \r\n        url: data.url as unknown as string, bio: data.bio as unknown as string, \r\n        location: data.location as unknown as string}; \r\n    \r\n    const rep:Rep[] =  \r\n        repositories.map ( i => (\r\n            {name: i.name as unknown as string,\r\n            html_url: i.html_url as unknown as string }\r\n            )) \r\n        ;\r\n\r\n\r\n    const [visibleForm, setFormVisible] = useState(false);\r\n\r\n    const ToggleFormVisible = () => {\r\n        setFormVisible(!visibleForm);\r\n    }\r\n\r\n    async function submitHandler () {\r\n\r\n        // e.preventDefault();\r\n\r\n        const profile = await fetch(`https://api.github.com/users/${UserName}`);\r\n\r\n        if (profile.ok) {\r\n\r\n           const profileJson = await profile.json();    \r\n           const repositories = await fetch(profileJson.repos_url);\r\n           const repositoriesJson = await repositories.json();\r\n    \r\n           if (profileJson) {\r\n            setData(profileJson);\r\n            SetRepositories(repositoriesJson);\r\n           }\r\n\r\n           ToggleFormVisible();\r\n         }\r\n        else {\r\n            alert('Пользователь не найден');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        {!visibleForm ?\r\n          <div className=\"ui search\">\r\n          <div className=\"ui icon input\">\r\n            <i className=\"search icon\"></i>\r\n            <input\r\n              className=\"prompt\"\r\n              placeholder=\"Введите имя пользователя\"\r\n              type=\"text\"\r\n              value={UserName}\r\n              onChange = {e => {SetUserName(e.target.value);}}\r\n            //   onChange={onChangeHandler}\r\n            />\r\n            </div>\r\n\r\n            <button \r\n                className=\"ui primary button\"\r\n                type = \"submit\" \r\n                onClick={e => {e.preventDefault(); submitHandler()}}>\r\n                <i className=\"github icon\"></i>\r\n            Поиск\r\n            </button>\r\n            </div> \r\n\r\n            :\r\n            \r\n        <div>\r\n            {console.log(repositories)}\r\n            <Card user={user} rep={rep}/>\r\n            <button \r\n            className = \"ui primary button\"\r\n            onClick = {ToggleFormVisible}>\r\n            <i className=\"heart outline icon\"></i>\r\n            Назад</button>\r\n            </div>\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\nexport interface UserPage{         \r\n    name: string;\r\n    avatar_url:string;\r\n    url:string;\r\n    bio:string;\r\n    location:string;\r\n};\r\nexport interface Rep{  \r\n        name: string;\r\n        html_url: string;  \r\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Search from './components/Search'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className = \"main\">\n          <Search />\n      </div>    \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}